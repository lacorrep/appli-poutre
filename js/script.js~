// TODO si distributeur ou instance dropé à côté de la barre, le ramener aux bords
// tout ceci doit être paramétrable

var poutre = new Poutre();

// onDomReady
$(function(){

gui.canvas = $("#canvas_def")[0];

// Pas de sélection du texte dans les menus
$(".menu").disableSelection();

// Explication de ce qu'est un ddl avec la balise abbr
$("ddl").replaceWith('<abbr title="Degré de liberté">ddl</abbr>')

// DEBUG
$("html").mousedown(function(e) {
	// console.log(e.which);
	if( e.which === 2 ) {
		e.preventDefault();
		poutre.update_def(gui.canvas)
		poutre.dessiner_def(gui.canvas)
	}
});

$("#debug-tools").css("display","block"); // DEBUG



// Drag & drop Liaisons

$(".cl_distributeur").draggable({
	snap: ".cl_instance, .cl_instance", // s’accroche aux autres CL
	snapTolerance: gui.options.snapTol,
	revert: true,
	revertDuration: 100,
	opacity: gui.options.drag_opacity,
	cursor: "move"
})

// Drag & drop Chargements

$(".ch_distributeur").draggable({
	snap: ".cl_instance, .ch_instance", // s’accroche aux autres CL
	snapTolerance: gui.options.snapTol,
	revert: true,
	revertDuration: 100,
	opacity: gui.options.drag_opacity,
	cursor: "move"
})

// Zone de drop

$("#zone_drop_barre").droppable({
	accept: ".cl_distributeur, .cl_instance, .ch_distributeur, .ch_instance",
	tolerance: "pointer",
	drop: function(evt, ui)
	{
		var pos_x = Math.floor( ui.draggable.offset().left - $(this).offset().left );
		// if( pos_x <  ) // TODO : snapper l'objet sur les bords si droppé à une extrêmité de la poutre

		// Si c'est une instance à déplacer

		if( ui.draggable.hasClass("cl_instance") )
		{
			ui.draggable.css({top:"", bottom:"50%", left:pos_x}); // TODO top hardcodé
		}

		if( ui.draggable.hasClass("ch_instance") )
		{
			ui.draggable.css({top:"", bottom:"50%", left:pos_x}); // TODO top hardcodé
		}

		// Si c'est un distributeur de CL

		if( ui.draggable.hasClass('cl_distributeur') )
		{
			var nom_liaison = ui.draggable.attr("id").slice(10); // retirer "cl_distri_"
			switch( nom_liaison )
			{
				case "appui":
				case "pivot":
				case "encastrement":
					var eltDOM = $('<span class="cl_instance cl_'+nom_liaison+'" style="left:'+pos_x+'px"></span>')[0];
					$(this).append(eltDOM);
					poutre.ajouter_liaison(eltDOM, nom_liaison, "Y", pos_x); // TODO axe
					break;
				default:
					alert("Erreur : liaison de type inconnu");
			}
			renouveller_interaction();
		}

		// Si c'est un distributeur de Chargements

		if( ui.draggable.hasClass('ch_distributeur') )
		{
			var nom_liaison = ui.draggable.attr("id").slice(10); // retirer "ch_distri_"
			switch( nom_liaison )
			{
				case "f_c":
				case "m_c":
					// Concentré
					var eltDOM = $('<span class="ch_instance ch_'+nom_liaison+'" style="left:'+pos_x+'px"></span>')[0];
					$(this).append(eltDOM);
					poutre.ajouter_chargement(eltDOM, nom_liaison, "Y", pos_x, 1);
					break;
				case "f_r":
				case "m_r":
					// Réparti
					// calculer la largeur de l'élément
					var hauteur = ui.draggable.height();
					var largeur = ui.draggable.width();
					var eltDOM = $('<span class="ch_instance ch_'+nom_liaison+'" style="left:'+pos_x+'px"></span>')[0];
					$(this).append(eltDOM);
					poutre.ajouter_chargement(eltDOM, nom_liaison, "Y", pos_x, hauteur, pos_x+largeur, hauteur);
					break;
				default:
					alert("Erreur : chargement de type inconnu");
			}
			renouveller_interaction();
		}
	},
	over: function(evt, ui)
	{
		// Si c'est une instance dans la zone
		if( ui.draggable.hasClass("cl_instance") || ui.draggable.hasClass("ch_instance") )
		{
			$(ui.draggable).removeClass("toBeRemoved");
			$(ui.draggable).clearQueue().stop().fadeIn(0);
		}
	},
	out: function (evt, ui)
	{
		// Si c'est une instance dans la zone
		if( ui.draggable.hasClass("cl_instance") || ui.draggable.hasClass("ch_instance") )
		{
			$(ui.draggable).addClass("toBeRemoved").fadeOut(700, function() {
				if( $(ui.draggable).hasClass("toBeRemoved") )
				{
					if( $(ui.draggable).hasClass("cl_instance") ) poutre.retirer_liaison( $(this)[0] );
					if( $(ui.draggable).hasClass("ch_instance") ) poutre.retirer_chargement( $(this)[0] );
					$(this).remove();
				}
			});
		}
	}
})

})



//  Fonctions

function renouveller_interaction()
// Lors de la création de nouveaux éléments, redéfinir les interactions possibles
{
	$(".cl_instance, .ch_instance").draggable({
		snap: ".cl_instance, .ch_instance", // s'accroche aux autres CL
		snapTolerance: gui.options.snapTol,
		opacity: gui.options.drag_opacity,
		cursor: "move",
		stop: function(evt,ui)
		{
			var elt = $(ui.helper[0]);
			var pos_x = Math.floor( elt.offset().left - $("#zone_drop_barre").offset().left );
			if( elt.hasClass("ch_f_c") || elt.hasClass("ch_m_c") )
			{
				poutre.modifier_chargement(elt[0], "Y", pos_x, 1); // TODO changement d'axe ; intégrer changement d'intensité
				console.log(poutre.chargements.get(elt[0]).x0); // DEBUG
			}
			if( elt.hasClass("ch_f_r") || elt.hasClass("ch_m_r") )
			{
				poutre.modifier_chargement(elt[0], "Y", pos_x, elt.height(), pos_x+elt.width()); // TODO changement d'axe ; intégrer changement d'intensité
				console.log( [ poutre.chargements.get(elt[0]).x0 , poutre.chargements.get(elt[0]).x1 ] ); // DEBUG
			}
			if( elt.hasClass("cl_instance") )
			{
				poutre.modifier_liaison(elt[0], "Y", pos_x); // TODO changement d'axe
				console.log(poutre.liaisons.get(elt[0]).x); // DEBUG
			}
		}
	})

	// Draggable resizable : envelopper
	// http://jsfiddle.net/vrUgs/2/
	$(".ch_f_r, .ch_m_r").resizable({
		containment: "parent",
		handles: 'n, e, w', // north : intensité de la force
		//ghost: true // ne fonctionne pas avec containment:"parent"
		stop: function(evt,ui)
		{
			var elt = ui.element;
			var pos_x = Math.floor( elt.offset().left - $("#zone_drop_barre").offset().left );
			poutre.modifier_chargement(elt[0], "Y", pos_x, elt.height(), pos_x+elt.width()); // TODO changement d'axe ; intégrer les chargement affines
		}
	})
}
